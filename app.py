import os

import bcrypt
import eventlet
from werkzeug.utils import secure_filename

eventlet.monkey_patch()
from flask import Flask, render_template, request, redirect, url_for, flash
from flask_mysqldb import MySQL
import MySQLdb.cursors
import re

from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from flask_socketio import SocketIO, emit, join_room

app = Flask(__name__)
app.secret_key = 'your_secret_key'

# ‚ö° C·∫•u h√¨nh WebSocket
socketio = SocketIO(app, cors_allowed_origins="*", manage_session=False)

# C·∫•u h√¨nh MySQL
app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = 'Admin@123'
app.config['MYSQL_DB'] = 'chat_app'
app.config['UPLOAD_FOLDER'] = 'static/uploads'
mysql = MySQL(app)

# C·∫•u h√¨nh Flask-Login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

class User(UserMixin):
    def __init__(self, id, username):
        self.id = str(id)  # Flask-Login y√™u c·∫ßu ID l√† string
        self.username = username

    @staticmethod
    def get(user_id):
        cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
        cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
        user = cursor.fetchone()
        cursor.close()
        if user:
            return User(user['id'], user['username'])
        return None

@login_manager.user_loader
def load_user(user_id):
    return User.get(user_id)

@app.route("/")
def home():
    if current_user.is_authenticated:
        return redirect(url_for('chat'))
    return redirect(url_for('login'))

@app.route('/login/', methods=['GET', 'POST'])
def login():
    if request.method == 'POST' and 'username' in request.form and 'password' in request.form:
        username = request.form['username']
        password = request.form['password']

        cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
        cursor.execute('SELECT * FROM users WHERE username = %s', (username,))
        user = cursor.fetchone()

        if user and bcrypt.checkpw(password.encode('utf-8'), user['password'].encode('utf-8')):
            user_obj = User(user['id'], user['username'])
            login_user(user_obj)
            return redirect(url_for('chat'))
        else:
            flash('T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!')
    return render_template('login.html')


@app.route('/register/', methods=['GET', 'POST'])
def register():
    if request.method == 'POST' and 'username' in request.form and 'password' in request.form:
        username = request.form['username']
        password = request.form['password']
        avatar = request.files['avatar']

        cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
        cursor.execute('SELECT * FROM users WHERE username = %s', (username,))
        account = cursor.fetchone()

        if account:
            flash('T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i!')
        elif not re.match(r'[A-Za-z0-9]+', username):
            flash('T√™n ƒëƒÉng nh·∫≠p ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i v√† s·ªë!')
        else:
            hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

            # X·ª≠ l√Ω upload avatar
            if avatar:
                filename = secure_filename(avatar.filename)
                file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                avatar.save(file_path)
                avatar_path = os.path.join('uploads', filename)
            else:
                avatar_path = None

            cursor.execute('INSERT INTO users (username, password, avatar) VALUES (%s, %s, %s)',
                           (username, hashed_password, avatar_path))
            mysql.connection.commit()
            flash('ƒêƒÉng k√Ω th√†nh c√¥ng!')
            return redirect(url_for('login'))

    return render_template('register.html')

@app.route('/logout/')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

# L∆∞u tin nh·∫Øn v√†o database
def save_message(sender_id, receiver_id, message):
    cursor = mysql.connection.cursor()
    cursor.execute("INSERT INTO messages (sender_id, receiver_id, message) VALUES (%s, %s, %s)",
                   (sender_id, receiver_id, message))
    mysql.connection.commit()
    cursor.close()

# L·∫•y danh s√°ch ng∆∞·ªùi d√πng (tr·ª´ ch√≠nh m√¨nh)
def get_users():
    cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
    cursor.execute('SELECT * FROM users WHERE id != %s', (current_user.id,))
    users = cursor.fetchall()
    cursor.close()
    return users

# L·∫•y tin nh·∫Øn gi·ªØa 2 ng∆∞·ªùi
def get_messages():
    cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
    cursor.execute('''
        SELECT messages.*, users.username 
        FROM messages 
        JOIN users ON messages.sender_id = users.id 
        WHERE receiver_id = %s OR sender_id = %s 
        ORDER BY sent_at ASC
    ''', (current_user.id, current_user.id))
    messages = cursor.fetchall()
    cursor.close()
    return messages

@app.route('/chat/', methods=['GET', 'POST'])
@login_required
def chat():
    if request.method == 'POST':
        receiver_id = request.form.get('receiver_id')
        message = request.form.get('message')

        if not receiver_id or not receiver_id.isdigit():
            flash('Vui l√≤ng ch·ªçn ng∆∞·ªùi nh·∫≠n!')
            return redirect(url_for('chat'))

        if not message:
            flash('Vui l√≤ng nh·∫≠p tin nh·∫Øn!')
            return redirect(url_for('chat'))

        save_message(current_user.id, int(receiver_id), message)
        flash('Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i!')
        return redirect(url_for('chat'))

    users = get_users()
    messages = get_messages()
    return render_template('chat.html', users=users, messages=messages)

@app.route('/friends/')
@login_required
def friends():
    users = get_users()
    return render_template('friends.html', users=users)

# S·ª± ki·ªán WebSocket
@socketio.on("connect")
def handle_connect():
    print(f"Client connected: {current_user.is_authenticated}, User ID: {current_user.id if current_user.is_authenticated else 'Unknown'}")
    if current_user.is_authenticated:
        join_room(str(current_user.id))  # Tham gia ph√≤ng c·ªßa ng∆∞·ªùi d√πng
        print(f"User {current_user.id} joined room {current_user.id}")


# Truy v·∫•n username t·ª´ sender_id
def get_username(sender_id):
    cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)  # ‚úÖ K·∫øt n·ªëi DB
    cursor.execute("SELECT username FROM users WHERE id = %s", (sender_id,))
    result = cursor.fetchone()
    cursor.close()  # ‚úÖ ƒê√≥ng cursor
    return result["username"] if result else "Ng∆∞·ªùi d√πng ·∫©n danh"

@socketio.on("message")
def handle_message(data):
    sender_id = current_user.id
    receiver_id = data.get("receiver_id")
    message_text = data.get("message")

    if not receiver_id or not message_text.strip():
        print("üö´ L·ªói: Kh√¥ng c√≥ ng∆∞·ªùi nh·∫≠n ho·∫∑c tin nh·∫Øn r·ªóng")
        return

    # L·∫•y username t·ª´ sender_id
    username = get_username(sender_id)

    # L∆∞u tin nh·∫Øn v√†o database
    save_message(sender_id, receiver_id, message_text)

    print(f"üì® ƒêang g·ª≠i tin nh·∫Øn t·ª´ {username} ({sender_id}) ƒë·∫øn {receiver_id}: {message_text}")  # Debug 1

    emit_data = {
        "sender_id": sender_id,
        "receiver_id": receiver_id,
        "username": username,  # ‚úÖ Th√™m username v√†o d·ªØ li·ªáu g·ª≠i ƒëi
        "message": message_text
    }

    # G·ª≠i tin nh·∫Øn ƒë·∫øn ng∆∞·ªùi nh·∫≠n
    emit("message", emit_data, room=str(receiver_id))
    print(f"‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn ƒë·∫øn ph√≤ng {receiver_id}")  # Debug 2

    # G·ª≠i l·∫°i tin nh·∫Øn cho ng∆∞·ªùi g·ª≠i
    emit("message", emit_data, room=str(sender_id))
    print(f"‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn l·∫°i cho ph√≤ng {sender_id}")  # Debug 3


if __name__ == '__main__':
    socketio.run(app, debug=True)
